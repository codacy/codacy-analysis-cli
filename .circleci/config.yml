version: 2.1

orbs:
  codacy: codacy/base@2.14.8

# Re-usable blocks to reduce boilerplate in job definitions.
references:
  host_environment_defaults:
    &host_environment_defaults # Customize the JVM maximum heap limit
    JAVA_OPTS: -Xmx3200m

  docker_environment_defaults:
    &docker_environment_defaults # Customize the JVM to read correct memory values
    JAVA_OPTS: "-XX:MinRAMPercentage=60.0 -XX:MaxRAMPercentage=90.0"

  default_java_job: &default_java_job
    docker:
      - image: circleci/openjdk:8-jdk
        environment:
          <<: *docker_environment_defaults
    environment:
      <<: *host_environment_defaults
    working_directory: ~/workdir

  restore_dependencies: &restore_dependencies
    restore_cache:
      keys:
        - sbt-ivy2-dependencies-1.0.13-{{ checksum "/tmp/dependencies.cache.tmp" }}-extras
        - sbt-ivy2-dependencies-1.0.13-{{ checksum "/tmp/dependencies.cache.tmp" }}
        - sbt-ivy2-dependencies-1.0.13

  clean_sbt_dependencies_cache: &clean_sbt_dependencies_cache
    run:
      name: Clean sbt dependencies cache
      command: |
        find ~/.sbt -name "*.lock" -delete
        find ~/.ivy2 -name "ivydata-*.properties" -delete

  setup_dependencies_key: &setup_dependencies_key
    run:
      name: Generate cache key
      command: |
        shasum build.sbt \
          project/plugins.sbt \
          project/build.properties \
          project/Common.scala \
          project/Dependencies.scala > /tmp/dependencies.cache.tmp

  restore_maven_dependencies: &restore_maven_dependencies
    restore_cache:
      keys:
        - maven-dependencies-1.0.13-{{ checksum "pom.xml" }}
        - maven-dependencies-1.0.13

  run_integration_tests: &run_integration_tests
    machine: true
    working_directory: ~/integration-tests
    steps:
      - add_ssh_keys:
          fingerprints:
            - "df:83:d7:c7:d5:79:06:c2:3b:d1:fd:e2:a3:d1:12:c5"
      - run:
          name: Checkout integration tests
          working_directory: ~/
          command: |
            ssh-keyscan bitbucket.org >> ~/.ssh/known_hosts
            bash -c "`curl -fsSL https://raw.githubusercontent.com/codacy/codacy-analysis-cli/master/scripts/checkout.sh`" -s git@bitbucket.org:qamine/qa-automation-tests.git ~/integration-tests master
      - *restore_maven_dependencies
      - attach_workspace:
          at: /tmp/workspace/workdir
      # Clean CODACY_PROJECT_TOKEN is needed to make sure tests are run in a clean state without
      # influence from the build server environment
      # (e.g.: to avoid tests picking the CODACY_PROJECT_TOKEN used to send coverage
      # and incorrectly using it to obtain remote configurations)
      - run:
          name: Clean CODACY_PROJECT_TOKEN
          command: echo 'unset CODACY_PROJECT_TOKEN' >> $BASH_ENV
      - run:
          name: Load docker from file
          command: |
            if [[ "$CODACY_ANALYSIS_CLI_VERSION" != "latest" ]]
            then
              docker load --input /tmp/workspace/workdir/docker-image.tar
            else
              echo "Skipping load of docker when testing latest"
            fi
      - run:
          name: Setup codacy-analysis-cli version for integration tests
          command: |
            if [[ -z "$CODACY_ANALYSIS_CLI_VERSION" ]]
            then
              echo 'export CODACY_ANALYSIS_CLI_VERSION="dev-snapshot"' >> $BASH_ENV
            fi
      - run:
          name: Install codacy-analysis-cli
          command: |
            curl -L https://github.com/codacy/codacy-analysis-cli/archive/master.tar.gz | tar xvz
            cd codacy-analysis-cli-* && sudo make install
            rm -rf codacy-analysis-cli-*
      - run:
          name: Run tests
          command: |
            export EXECUTION_TIME=`date +%F_%Hh%M-%Z`
            mvn test -DsuiteFile=$TEST_PATH -Drp.description=$EXECUTION_TIME -Drp.uuid=$RP_CIRCLECI_UUID -Drp.launch=$LAUNCH_NAME -Drp.project=$PROJECT_NAME -Drp.mode=DEFAULT -Drp.endpoint=$RP_ENDPOINT -Drp.tags=$LAUNCH_TAG
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      - store_artifacts:
          path: ExtentReports/

jobs:
  test:
    machine: true
    environment:
      <<: *host_environment_defaults
    working_directory: ~/workdir
    steps:
      - attach_workspace:
          at: ~/workdir
      - *setup_dependencies_key
      - *restore_dependencies
      - run:
          name: Configure git
          command: |
            git config --global user.email "team@codacy.com"
            git config --global user.name "Codacy Team"
      - run:
          name: Test
          command: ./scripts/test.sh
      - run:
          name: Store test reports
          working_directory: ~/
          command: |
            mkdir -p ~/coverage-reports/junit
            cp -rf ~/workdir/cli/target/test-reports ~/coverage-reports/junit/cli
            cp -rf ~/workdir/core/target/test-reports ~/coverage-reports/junit/core
      - store_test_results:
          path: ~/coverage-reports
      - store_artifacts:
          path: ~/workdir/target/scala-2.12/coverage-report
      - store_artifacts:
          path: ~/workdir/target/scala-2.12/scoverage-report
      - store_artifacts:
          path: ~/workdir/target/scala-2.12/scoverage-data
      - store_artifacts:
          path: ~/workdir/target/test-reports

  publish_lib:
    <<: *default_java_job
    steps:
      - attach_workspace:
          at: ~/workdir
      - *setup_dependencies_key
      - *restore_dependencies
      - run:
          name: Install AWS CLI
          command: |
            sudo apt -y update
            sudo apt -y install python3-pip
            sudo python3 -m pip install awscli
      - run:
          name: Setup AWS Credentials
          command: ./scripts/setup-aws-credentials.sh
      - run:
          name: Retrieve GPG Keys
          command: |
            mkdir -p ~/.gnupg
            aws s3 sync --profile shared-services --include '*.gpg' s3://$AWS_CREDENTIALS_BUCKET/gnupg/ ~/.gnupg
      - run:
          name: Publish to Sonatype
          command: |
            sbt "set codacyAnalysisCore / version := \"$(cat .version)\";
                 set pgpPassphrase := Some(\"$SONATYPE_GPG_PASSPHRASE\".toCharArray);
                 codacyAnalysisCore/publishSigned;
                 +codacyAnalysisModels/publishSigned;
                 sonatypeBundleRelease"

  maven_dependencies:
    <<: *default_java_job
    working_directory: ~/integration-tests
    steps:
      - add_ssh_keys:
          fingerprints:
            - "df:83:d7:c7:d5:79:06:c2:3b:d1:fd:e2:a3:d1:12:c5"
      - run:
          name: Checkout integration tests
          command: |
            ssh-keyscan bitbucket.org >> ~/.ssh/known_hosts
            bash -c "`curl -fsSL https://raw.githubusercontent.com/codacy/codacy-analysis-cli/master/scripts/checkout.sh`" -s git@bitbucket.org:qamine/qa-automation-tests.git ~/integration-tests master
      - *restore_maven_dependencies
      - run: mvn dependency:go-offline
      - run:
          name: Compile tests
          command: mvn test-compile
      - save_cache:
          key: maven-dependencies-1.0.13-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2

  test_staging:
    <<: *run_integration_tests
    environment:
      TEST_PATH: Suite/CLI/STAGING.xml
      LAUNCH_TAG: CIRCLECI;CLI;STAGING
      PROJECT_NAME: codacy-analysis-cli
      LAUNCH_NAME: CLI_STAGING
      RP_LAUNCH_URL: https://reportportal.staging.codacy.org/ui/#codacy-analysis-cli/launches
  test_production:
    <<: *run_integration_tests
    environment:
      TEST_PATH: Suite/CLI/PROD.xml
      CODACY_ANALYSIS_CLI_VERSION: latest
      LAUNCH_TAG: CIRCLECI;CLI;PROD
      PROJECT_NAME: codacy-analysis-cli
      LAUNCH_NAME: CLI_PROD
      RP_LAUNCH_URL: https://reportportal.staging.codacy.org/ui/#codacy-analysis-cli/launches

workflows:
  version: 2
  test-and-publish:
    jobs:
      - codacy/checkout_and_version:
          write_sbt_version: true
      - codacy/sbt:
          name: compile
          cmd: ./scripts/compile.sh
          persist_to_workspace: true
          requires:
            - codacy/checkout_and_version
      - codacy/sbt:
          name: lint
          cmd: ./scripts/lint.sh
          requires:
            - compile
      - test:
          requires:
            - compile
      - codacy/sbt:
          name: publish_docker_locally
          cmd: |
            sbt "set codacyAnalysisCli / version := \"dev-snapshot\";
                 codacyAnalysisCli/docker:publishLocal"
            docker save --output docker-image.tar codacy/$CIRCLE_PROJECT_REPONAME:dev-snapshot
          persist_to_workspace: true
          requires:
            - compile
      - maven_dependencies:
          filters:
            branches:
              only:
                - master
          requires:
            - test
            - lint
            - publish_docker_locally
      - test_staging:
          requires:
            - maven_dependencies
      - publish_lib:
          context: CodacyAWS
          requires:
            - test_staging
      - codacy/shell:
          name: publish_dockerhub
          context: CodacyDocker
          cmd: |
            docker load --input docker-image.tar
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker tag codacy/$CIRCLE_PROJECT_REPONAME:dev-snapshot codacy/$CIRCLE_PROJECT_REPONAME:$(cat .version)
            docker tag codacy/$CIRCLE_PROJECT_REPONAME:dev-snapshot codacy/$CIRCLE_PROJECT_REPONAME:latest
            docker push codacy/$CIRCLE_PROJECT_REPONAME:$(cat .version)
            docker push codacy/$CIRCLE_PROJECT_REPONAME:latest
          requires:
            - test_staging
      - codacy/tag_version:
          context: CodacyAWS
          requires:
            - publish_dockerhub
      - publish_dockerhub_stable_hold:
          context: CodacyDocker
          type: approval
          requires:
            - test_staging
      - codacy/shell:
          name: publish_dockerhub_stable
          context: CodacyDocker
          cmd: |
            docker load --input docker-image.tar
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker tag codacy/$CIRCLE_PROJECT_REPONAME:dev-snapshot codacy/$CIRCLE_PROJECT_REPONAME:stable
            docker push codacy/$CIRCLE_PROJECT_REPONAME:stable
          requires:
            - publish_dockerhub_stable_hold

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *" # Every day “At minute 00:00”
          filters:
            branches:
              only:
                - master
    jobs:
      - maven_dependencies
      - test_production:
          requires:
            - maven_dependencies
